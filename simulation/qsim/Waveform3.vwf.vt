// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/31/2023 22:22:26"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          circuito_codificador_funcionalidade
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module circuito_codificador_funcionalidade_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg B;
reg C;
reg D;
reg E;
reg F;
reg G;
// wires                                               
wire [2:0] CF;

// assign statements (if any)                          
circuito_codificador_funcionalidade i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.CF(CF),
	.D(D),
	.E(E),
	.F(F),
	.G(G)
);
initial 
begin 
#1000000 $finish;
end 

// A
initial
begin
	A = 1'b1;
	A = #10000 1'b0;
end 

// B
initial
begin
	B = 1'b0;
	B = #10000 1'b1;
	B = #10000 1'b0;
end 

// C
initial
begin
	C = 1'b0;
end 

// D
initial
begin
	D = 1'b0;
end 

// E
initial
begin
	E = 1'b0;
	E = #20000 1'b1;
	E = #10000 1'b0;
	E = #20000 1'b1;
	E = #10000 1'b0;
end 

// F
initial
begin
	F = 1'b0;
	F = #20000 1'b1;
	F = #10000 1'b0;
	F = #10000 1'b1;
	F = #10000 1'b0;
end 

// G
initial
begin
	G = 1'b0;
	G = #20000 1'b1;
	G = #10000 1'b0;
end 
endmodule

